/* -*- C++ -*- */
/* Generated by /home/binary9/dev/OpenDDS-3.12/dds/idl/opendds_idl version 3.12 (ACE version 6.2a_p15) running on input file ../IDL/Header_.idl */
#ifndef OPENDDS_IDL_GENERATED_HEADER_TYPESUPPORTIMPL_H_UW0VFN
#define OPENDDS_IDL_GENERATED_HEADER_TYPESUPPORTIMPL_H_UW0VFN
#include "Header_C.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "Header_TypeSupportC.h"
#include "Time_C.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: builtin_interfaces */



/* Begin MODULE: msg */



/* Begin MODULE: dds_ */



/* Begin STRUCT: Time_ */


/* End STRUCT: Time_ */

/* End MODULE: dds_ */

/* End MODULE: msg */

/* End MODULE: builtin_interfaces */


/* Begin MODULE: std_msgs */



/* Begin MODULE: msg */



/* Begin MODULE: dds_ */



/* Begin STRUCT: Header_ */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const std_msgs::msg::dds_::Header_& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const std_msgs::msg::dds_::Header_& stru);

bool operator>>(Serializer& strm, std_msgs::msg::dds_::Header_& stru);

size_t gen_max_marshaled_size(const std_msgs::msg::dds_::Header_& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const std_msgs::msg::dds_::Header_> stru, bool align);

void gen_find_size(KeyOnly<const std_msgs::msg::dds_::Header_> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const std_msgs::msg::dds_::Header_> stru);

bool operator>>(Serializer& strm, KeyOnly<std_msgs::msg::dds_::Header_> stru);

template <>
struct MarshalTraits<std_msgs::msg::dds_::Header_> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace std_msgs {
namespace msg {
namespace dds_ {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct  Header__OpenDDS_KeyLessThan {
  bool operator()(const std_msgs::msg::dds_::Header_&, const std_msgs::msg::dds_::Header_&) const
  {
    // Eith no DCPS_DATA_KEYs, return false
    // to allow use of map with just one entry
    return false;
  }
};
}
}
}


namespace std_msgs {
namespace msg {
namespace dds_ {
class Header_TypeSupportImpl;
}
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<std_msgs::msg::dds_::Header_> {
  typedef std_msgs::msg::dds_::Header_ MessageType;
  typedef std_msgs::msg::dds_::Header_Seq MessageSequenceType;
  typedef std_msgs::msg::dds_::Header_TypeSupport TypeSupportType;
  typedef std_msgs::msg::dds_::Header_TypeSupportImpl TypeSupportTypeImpl;
  typedef std_msgs::msg::dds_::Header_DataWriter DataWriterType;
  typedef std_msgs::msg::dds_::Header_DataReader DataReaderType;
  typedef std_msgs::msg::dds_::Header__OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "std_msgs::msg::dds_::Header_"; }
  static bool gen_has_key () { return false; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace std_msgs {
namespace msg {
namespace dds_ {
class  Header_TypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<Header_TypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Header_> TraitsType;
  typedef Header_TypeSupport TypeSupportType;
  typedef Header_TypeSupport::_var_type _var_type;
  typedef Header_TypeSupport::_ptr_type _ptr_type;

  Header_TypeSupportImpl() {}
  virtual ~Header_TypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static Header_TypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<std_msgs::msg::dds_::Header_>();
bool gen_skip_over(Serializer& ser, std_msgs::msg::dds_::Header_*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Header_ */

/* End MODULE: dds_ */

/* End MODULE: msg */

/* End MODULE: std_msgs */
#endif /* OPENDDS_IDL_GENERATED_HEADER_TYPESUPPORTIMPL_H_UW0VFN */
