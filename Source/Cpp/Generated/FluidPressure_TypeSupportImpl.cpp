/* Generated by /home/binary9/dev/OpenDDS-3.12/dds/idl/opendds_idl version 3.12 (ACE version 6.2a_p15) running on input file ../IDL/FluidPressure_.idl */
#include "FluidPressure_TypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/PoolAllocator.h"
#include "Header_TypeSupportImpl.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: builtin_interfaces */



/* Begin MODULE: msg */



/* Begin MODULE: dds_ */



/* Begin STRUCT: Time_ */


/* End STRUCT: Time_ */

/* End MODULE: dds_ */

/* End MODULE: msg */

/* End MODULE: builtin_interfaces */


/* Begin MODULE: std_msgs */



/* Begin MODULE: msg */



/* Begin MODULE: dds_ */



/* Begin STRUCT: Header_ */


/* End STRUCT: Header_ */

/* End MODULE: dds_ */

/* End MODULE: msg */

/* End MODULE: std_msgs */


/* Begin MODULE: sensor_msgs */



/* Begin MODULE: msg */



/* Begin MODULE: dds_ */



/* Begin STRUCT: FluidPressure_ */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const sensor_msgs::msg::dds_::FluidPressure_& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  gen_find_size(stru.header_, size, padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.fluid_pressure_);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.variance_);
}

bool operator<<(Serializer& strm, const sensor_msgs::msg::dds_::FluidPressure_& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.header_)
    && (strm << stru.fluid_pressure_)
    && (strm << stru.variance_);
}

bool operator>>(Serializer& strm, sensor_msgs::msg::dds_::FluidPressure_& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.header_)
    && (strm >> stru.fluid_pressure_)
    && (strm >> stru.variance_);
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<sensor_msgs::msg::dds_::FluidPressure_> : MetaStruct {
  typedef sensor_msgs::msg::dds_::FluidPressure_ T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
  size_t numDcpsKeys() const { return 0; }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const sensor_msgs::msg::dds_::FluidPressure_& typed = *static_cast<const sensor_msgs::msg::dds_::FluidPressure_*>(stru);
    if (std::strncmp(field, "header_.", 8) == 0) {
      return getMetaStruct<std_msgs::msg::dds_::Header_>().getValue(&typed.header_, field + 8);
    }
    if (std::strcmp(field, "fluid_pressure_") == 0) {
      return typed.fluid_pressure_;
    }
    if (std::strcmp(field, "variance_") == 0) {
      return typed.variance_;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct sensor_msgs::msg::dds_::FluidPressure_)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strncmp(field, "header_.", 8) == 0) {
      return getMetaStruct<std_msgs::msg::dds_::Header_>().getValue(ser, field + 8);
    } else {
      if (!gen_skip_over(ser, static_cast<std_msgs::msg::dds_::Header_*>(0))) {
        throw std::runtime_error("Field 'header_' could not be skipped");
      }
    }
    if (std::strcmp(field, "fluid_pressure_") == 0) {
      ACE_CDR::Double val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'fluid_pressure_' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 8)) {
        throw std::runtime_error("Field 'fluid_pressure_' could not be skipped");
      }
    }
    if (std::strcmp(field, "variance_") == 0) {
      ACE_CDR::Double val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'variance_' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 8)) {
        throw std::runtime_error("Field 'variance_' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct sensor_msgs::msg::dds_::FluidPressure_");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "header_.", 8) == 0) {
      return make_struct_cmp(&T::header_, getMetaStruct<std_msgs::msg::dds_::Header_>().create_qc_comparator(field + 8), next);
    }
    if (std::strcmp(field, "fluid_pressure_") == 0) {
      return make_field_cmp(&T::fluid_pressure_, next);
    }
    if (std::strcmp(field, "variance_") == 0) {
      return make_field_cmp(&T::variance_, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct sensor_msgs::msg::dds_::FluidPressure_)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"header_", "fluid_pressure_", "variance_", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "header_") == 0) {
      return &static_cast<const T*>(stru)->header_;
    }
    if (std::strcmp(field, "fluid_pressure_") == 0) {
      return &static_cast<const T*>(stru)->fluid_pressure_;
    }
    if (std::strcmp(field, "variance_") == 0) {
      return &static_cast<const T*>(stru)->variance_;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct sensor_msgs::msg::dds_::FluidPressure_)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "header_") == 0) {
      static_cast<T*>(lhs)->header_ = *static_cast<const std_msgs::msg::dds_::Header_*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "fluid_pressure_") == 0) {
      static_cast<T*>(lhs)->fluid_pressure_ = *static_cast<const CORBA::Double*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "variance_") == 0) {
      static_cast<T*>(lhs)->variance_ = *static_cast<const CORBA::Double*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct sensor_msgs::msg::dds_::FluidPressure_)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "fluid_pressure_") == 0) {
      return static_cast<const T*>(lhs)->fluid_pressure_ == static_cast<const T*>(rhs)->fluid_pressure_;
    }
    if (std::strcmp(field, "variance_") == 0) {
      return static_cast<const T*>(lhs)->variance_ == static_cast<const T*>(rhs)->variance_;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct sensor_msgs::msg::dds_::FluidPressure_)");
  }
};

template<>
const MetaStruct& getMetaStruct<sensor_msgs::msg::dds_::FluidPressure_>()
{
  static MetaStructImpl<sensor_msgs::msg::dds_::FluidPressure_> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, sensor_msgs::msg::dds_::FluidPressure_*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<sensor_msgs::msg::dds_::FluidPressure_>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: FluidPressure_ */

/* End MODULE: dds_ */

/* End MODULE: msg */

/* End MODULE: sensor_msgs */
