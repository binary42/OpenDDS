// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p15
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "DepthC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"

#if !defined (__ACE_INLINE__)
#include "DepthC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_orov_Depth[] =
      {
        { "pressure", &sensor_msgs::msg::dds_::_tc_FluidPressure_ },
        { "id", &CORBA::_tc_string },
        { "depths", &CORBA::_tc_float }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_orov_Depth (
  ::CORBA::tk_struct,
  "IDL:orov/Depth:1.0",
  "Depth",
  _tao_fields_orov_Depth,
  3);


namespace orov
{
  ::CORBA::TypeCode_ptr const _tc_Depth =
    &_tao_tc_orov_Depth;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:59

void
orov::Depth::_tao_any_destructor (
    void *_tao_void_pointer)
{
  Depth *_tao_tmp_pointer =
    static_cast<Depth *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_orov_DepthConfig[] =
      {
        { "id", &CORBA::_tc_string },
        { "water_type", &CORBA::_tc_octet },
        { "user_offset_enabled", &CORBA::_tc_boolean },
        { "zero_offset", &CORBA::_tc_float },
        { "zero_offset_user", &CORBA::_tc_float }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_orov_DepthConfig (
  ::CORBA::tk_struct,
  "IDL:orov/DepthConfig:1.0",
  "DepthConfig",
  _tao_fields_orov_DepthConfig,
  5);


namespace orov
{
  ::CORBA::TypeCode_ptr const _tc_DepthConfig =
    &_tao_tc_orov_DepthConfig;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:59

void
orov::DepthConfig::_tao_any_destructor (
    void *_tao_void_pointer)
{
  DepthConfig *_tao_tmp_pointer =
    static_cast<DepthConfig *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace orov
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::orov::Depth &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::orov::Depth>::insert_copy (
        _tao_any,
        ::orov::Depth::_tao_any_destructor,
        ::orov::_tc_Depth,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    orov::Depth *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::orov::Depth>::insert (
      _tao_any,
      ::orov::Depth::_tao_any_destructor,
      ::orov::_tc_Depth,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::orov::Depth *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::orov::Depth *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::orov::Depth *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::orov::Depth>::extract (
        _tao_any,
        ::orov::Depth::_tao_any_destructor,
        ::orov::_tc_Depth,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const orov::Depth &_tao_elem)
{
  TAO::Any_Dual_Impl_T<orov::Depth>::insert_copy (
    _tao_any,
    orov::Depth::_tao_any_destructor,
    orov::_tc_Depth,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  orov::Depth *_tao_elem)
{
  TAO::Any_Dual_Impl_T<orov::Depth>::insert (
    _tao_any,
    orov::Depth::_tao_any_destructor,
    orov::_tc_Depth,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  orov::Depth *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const orov::Depth *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const orov::Depth *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<orov::Depth>::extract (
      _tao_any,
      orov::Depth::_tao_any_destructor,
      orov::_tc_Depth,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace orov
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::orov::DepthConfig &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::orov::DepthConfig>::insert_copy (
        _tao_any,
        ::orov::DepthConfig::_tao_any_destructor,
        ::orov::_tc_DepthConfig,
        _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any, ::
    orov::DepthConfig *_tao_elem)
{
  TAO::Any_Dual_Impl_T< ::orov::DepthConfig>::insert (
      _tao_any,
      ::orov::DepthConfig::_tao_any_destructor,
      ::orov::_tc_DepthConfig,
      _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ::orov::DepthConfig *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ::orov::DepthConfig *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ::orov::DepthConfig *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T< ::orov::DepthConfig>::extract (
        _tao_any,
        ::orov::DepthConfig::_tao_any_destructor,
        ::orov::_tc_DepthConfig,
        _tao_elem
      );
}
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const orov::DepthConfig &_tao_elem)
{
  TAO::Any_Dual_Impl_T<orov::DepthConfig>::insert_copy (
    _tao_any,
    orov::DepthConfig::_tao_any_destructor,
    orov::_tc_DepthConfig,
    _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  orov::DepthConfig *_tao_elem)
{
  TAO::Any_Dual_Impl_T<orov::DepthConfig>::insert (
    _tao_any,
    orov::DepthConfig::_tao_any_destructor,
    orov::_tc_DepthConfig,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  orov::DepthConfig *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const orov::DepthConfig *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const orov::DepthConfig *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<orov::DepthConfig>::extract (
      _tao_any,
      orov::DepthConfig::_tao_any_destructor,
      orov::_tc_DepthConfig,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const orov::Depth &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.pressure) &&
    (strm << _tao_aggregate.id.in ()) &&
    (strm << _tao_aggregate.depths);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    orov::Depth &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.pressure) &&
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> _tao_aggregate.depths);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const orov::DepthConfig &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.id.in ()) &&
    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.water_type)) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.user_offset_enabled)) &&
    (strm << _tao_aggregate.zero_offset) &&
    (strm << _tao_aggregate.zero_offset_user);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    orov::DepthConfig &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.id.out ()) &&
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.water_type)) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.user_offset_enabled)) &&
    (strm >> _tao_aggregate.zero_offset) &&
    (strm >> _tao_aggregate.zero_offset_user);
}

TAO_END_VERSIONED_NAMESPACE_DECL



