/* Generated by opendds_idl version 3.9 (ACE version 6.2a_p10) running on input file Example.idl */
#include "ExampleTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: TimeBase */



/* Begin TYPEDEF: TimeT */


/* End TYPEDEF: TimeT */


/* Begin TYPEDEF: InaccuracyT */


/* End TYPEDEF: InaccuracyT */


/* Begin TYPEDEF: TdfT */


/* End TYPEDEF: TdfT */


/* Begin STRUCT: UtcT */


/* End STRUCT: UtcT */


/* Begin STRUCT: IntervalT */


/* End STRUCT: IntervalT */

/* End MODULE: TimeBase */


/* Begin MODULE: ExampleApp */



/* Begin STRUCT: Data */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const ExampleApp::Data& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.name.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.test.in()) + 1;
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.value);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.timestamp);
}

bool operator<<(Serializer& strm, const ExampleApp::Data& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.name.in())
    && (strm << stru.test.in())
    && (strm << stru.value)
    && (strm << stru.timestamp);
}

bool operator>>(Serializer& strm, ExampleApp::Data& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.name.out())
    && (strm >> stru.test.out())
    && (strm >> stru.value)
    && (strm >> stru.timestamp);
}

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<ExampleApp::Data> : MetaStruct {
  typedef ExampleApp::Data T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const ExampleApp::Data& typed = *static_cast<const ExampleApp::Data*>(stru);
    if (std::strcmp(field, "name") == 0) {
      return typed.name.in();
    }
    if (std::strcmp(field, "test") == 0) {
      return typed.test.in();
    }
    if (std::strcmp(field, "value") == 0) {
      return typed.value;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return typed.timestamp;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ExampleApp::Data)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "name") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'name' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'name' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "test") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'test' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'test' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "value") == 0) {
      ACE_CDR::Double val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'value' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 8);
    }
    if (std::strcmp(field, "timestamp") == 0) {
      ACE_CDR::ULongLong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'timestamp' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 8);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct ExampleApp::Data");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "name") == 0) {
      return make_field_cmp(&T::name, next);
    }
    if (std::strcmp(field, "test") == 0) {
      return make_field_cmp(&T::test, next);
    }
    if (std::strcmp(field, "value") == 0) {
      return make_field_cmp(&T::value, next);
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return make_field_cmp(&T::timestamp, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ExampleApp::Data)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"name", "test", "value", "timestamp", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "name") == 0) {
      return &static_cast<const T*>(stru)->name;
    }
    if (std::strcmp(field, "test") == 0) {
      return &static_cast<const T*>(stru)->test;
    }
    if (std::strcmp(field, "value") == 0) {
      return &static_cast<const T*>(stru)->value;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return &static_cast<const T*>(stru)->timestamp;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ExampleApp::Data)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "name") == 0) {
      static_cast<T*>(lhs)->name = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "test") == 0) {
      static_cast<T*>(lhs)->test = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "value") == 0) {
      static_cast<T*>(lhs)->value = *static_cast<const CORBA::Double*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      static_cast<T*>(lhs)->timestamp = *static_cast<const TimeBase::TimeT*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ExampleApp::Data)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "name") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->name.in(), static_cast<const T*>(rhs)->name.in());
    }
    if (std::strcmp(field, "test") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->test.in(), static_cast<const T*>(rhs)->test.in());
    }
    if (std::strcmp(field, "value") == 0) {
      return static_cast<const T*>(lhs)->value == static_cast<const T*>(rhs)->value;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return static_cast<const T*>(lhs)->timestamp == static_cast<const T*>(rhs)->timestamp;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ExampleApp::Data)");
  }
};

template<>
const MetaStruct& getMetaStruct<ExampleApp::Data>()
{
  static MetaStructImpl<ExampleApp::Data> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, ExampleApp::Data*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<ExampleApp::Data>().getValue(ser, "");
}

}  }

#endif

/* End STRUCT: Data */


/* Begin STRUCT: Event */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const ExampleApp::Event& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.kicker.in()) + 1;
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.timestamp);
}

bool operator<<(Serializer& strm, const ExampleApp::Event& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.kicker.in())
    && (strm << stru.timestamp);
}

bool operator>>(Serializer& strm, ExampleApp::Event& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.kicker.out())
    && (strm >> stru.timestamp);
}

bool gen_is_bounded_size(const ExampleApp::Event&)
{
  return false;
}

size_t gen_max_marshaled_size(const ExampleApp::Event& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

bool gen_is_bounded_size(KeyOnly<const ExampleApp::Event>)
{
  return false;
}

size_t gen_max_marshaled_size(KeyOnly<const ExampleApp::Event> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const ExampleApp::Event> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.kicker.in()) + 1;
}

bool operator<<(Serializer& strm, KeyOnly<const ExampleApp::Event> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.kicker.in());
}

bool operator>>(Serializer& strm, KeyOnly<ExampleApp::Event> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.kicker.out());
}

}  }

namespace OpenDDS { namespace DCPS {

bool gen_has_key(const ExampleApp::Event&)
{
  return true;
}

}  }

namespace ExampleApp {
}
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<ExampleApp::Event> : MetaStruct {
  typedef ExampleApp::Event T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

  Value getValue(const void* stru, const char* field) const
  {
    const ExampleApp::Event& typed = *static_cast<const ExampleApp::Event*>(stru);
    if (std::strcmp(field, "kicker") == 0) {
      return typed.kicker.in();
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return typed.timestamp;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ExampleApp::Event)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "kicker") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'kicker' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'kicker' length could not be deserialized");
      }
      ser.skip(len);
    }
    if (std::strcmp(field, "timestamp") == 0) {
      ACE_CDR::ULongLong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'timestamp' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 8);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct ExampleApp::Event");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "kicker") == 0) {
      return make_field_cmp(&T::kicker, next);
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return make_field_cmp(&T::timestamp, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ExampleApp::Event)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"kicker", "timestamp", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "kicker") == 0) {
      return &static_cast<const T*>(stru)->kicker;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return &static_cast<const T*>(stru)->timestamp;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ExampleApp::Event)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "kicker") == 0) {
      static_cast<T*>(lhs)->kicker = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      static_cast<T*>(lhs)->timestamp = *static_cast<const TimeBase::TimeT*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ExampleApp::Event)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "kicker") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->kicker.in(), static_cast<const T*>(rhs)->kicker.in());
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return static_cast<const T*>(lhs)->timestamp == static_cast<const T*>(rhs)->timestamp;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct ExampleApp::Event)");
  }
};

template<>
const MetaStruct& getMetaStruct<ExampleApp::Event>()
{
  static MetaStructImpl<ExampleApp::Event> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, ExampleApp::Event*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<ExampleApp::Event>().getValue(ser, "");
}

}  }

#endif

/* End STRUCT: Event */

/* End MODULE: ExampleApp */
