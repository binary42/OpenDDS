/* Generated by /home/binary9/dev/OpenDDS-3.12/dds/idl/opendds_idl version 3.12 (ACE version 6.2a_p15) running on input file ../IDL/Time_.idl */
#include "Time_TypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: builtin_interfaces */



/* Begin MODULE: msg */



/* Begin MODULE: dds_ */



/* Begin STRUCT: Time_ */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const builtin_interfaces::msg::dds_::Time_& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.sec_);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.nanosec_);
}

bool operator<<(Serializer& strm, const builtin_interfaces::msg::dds_::Time_& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.sec_)
    && (strm << stru.nanosec_);
}

bool operator>>(Serializer& strm, builtin_interfaces::msg::dds_::Time_& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.sec_)
    && (strm >> stru.nanosec_);
}

size_t gen_max_marshaled_size(const builtin_interfaces::msg::dds_::Time_& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 8;
}

size_t gen_max_marshaled_size(KeyOnly<const builtin_interfaces::msg::dds_::Time_> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const builtin_interfaces::msg::dds_::Time_> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const builtin_interfaces::msg::dds_::Time_> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<builtin_interfaces::msg::dds_::Time_> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace builtin_interfaces {
namespace msg {
namespace dds_ {
::DDS::DataWriter_ptr Time_TypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Time_> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}
::DDS::DataReader_ptr Time_TypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Time_> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}
#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr Time_TypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Time_> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Time_, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& Time_TypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Time_>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
bool Time_TypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}
const char* Time_TypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}
Time_TypeSupport::_ptr_type Time_TypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<builtin_interfaces::msg::dds_::Time_> : MetaStruct {
  typedef builtin_interfaces::msg::dds_::Time_ T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }
  size_t numDcpsKeys() const { return 0; }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  Value getValue(const void* stru, const char* field) const
  {
    const builtin_interfaces::msg::dds_::Time_& typed = *static_cast<const builtin_interfaces::msg::dds_::Time_*>(stru);
    if (std::strcmp(field, "sec_") == 0) {
      return typed.sec_;
    }
    if (std::strcmp(field, "nanosec_") == 0) {
      return typed.nanosec_;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct builtin_interfaces::msg::dds_::Time_)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "sec_") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'sec_' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'sec_' could not be skipped");
      }
    }
    if (std::strcmp(field, "nanosec_") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'nanosec_' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'nanosec_' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct builtin_interfaces::msg::dds_::Time_");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "sec_") == 0) {
      return make_field_cmp(&T::sec_, next);
    }
    if (std::strcmp(field, "nanosec_") == 0) {
      return make_field_cmp(&T::nanosec_, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct builtin_interfaces::msg::dds_::Time_)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"sec_", "nanosec_", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "sec_") == 0) {
      return &static_cast<const T*>(stru)->sec_;
    }
    if (std::strcmp(field, "nanosec_") == 0) {
      return &static_cast<const T*>(stru)->nanosec_;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct builtin_interfaces::msg::dds_::Time_)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "sec_") == 0) {
      static_cast<T*>(lhs)->sec_ = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "nanosec_") == 0) {
      static_cast<T*>(lhs)->nanosec_ = *static_cast<const CORBA::ULong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct builtin_interfaces::msg::dds_::Time_)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "sec_") == 0) {
      return static_cast<const T*>(lhs)->sec_ == static_cast<const T*>(rhs)->sec_;
    }
    if (std::strcmp(field, "nanosec_") == 0) {
      return static_cast<const T*>(lhs)->nanosec_ == static_cast<const T*>(rhs)->nanosec_;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct builtin_interfaces::msg::dds_::Time_)");
  }
};

template<>
const MetaStruct& getMetaStruct<builtin_interfaces::msg::dds_::Time_>()
{
  static MetaStructImpl<builtin_interfaces::msg::dds_::Time_> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, builtin_interfaces::msg::dds_::Time_*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<builtin_interfaces::msg::dds_::Time_>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Time_ */

/* End MODULE: dds_ */

/* End MODULE: msg */

/* End MODULE: builtin_interfaces */
